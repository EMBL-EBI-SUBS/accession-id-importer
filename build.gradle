buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.10.RELEASE'
    id 'java'
    id 'com.sourcemuse.mongo' version '1.0.0'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compile("uk.ac.ebi.subs:subs-repository:2.27.3-SNAPSHOT")
    compile 'org.codehaus.groovy:groovy-all:2.4.10'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

group = 'uk.ac.ebi.subs'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = '1.8'

mainClassName = "uk.ac.ebi.subs.accessionidimporter.AccessonIdImporterApplication"

task sourceJar(type: Jar) { from sourceSets.main.allJava }

artifacts {
    archives jar
    archives sourceJar {
        classifier "sources"
        destinationDirectory = new File("build/libs/sources")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    runWithMongoDb = true
}

mongo {
    mongoVersion = "3.4.3"
}

springBoot {
    executable = true
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

def devDeployHostName = hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
def testDeployHostName = hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
def prodDeployHostName = hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'

remotes {
    accessionIdImporter_dev {
        role('dev')
        host = devDeployHostName
    }
    accessionIdImporter_test {
        role('test')
        host = testDeployHostName
    }
    accessionIdImporter_prod {
        role('prod')
        host = prodDeployHostName
    }
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar", uploadJarFileName)
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployFile) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    File jarDeployDir = jarDeployFile.getParentFile()
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archiveFileName to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archiveFile.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveFileName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.archiveBaseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveBaseName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}